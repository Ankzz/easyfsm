{
  "name": "Easyfsm",
  "tagline": "A Finite State Machine Library implementation in Java",
  "body": "<A name=\"toc1-0\" title=\"EasyFSM - A Java Library to facilitate Finite State Machine (FSM) creation.\" />\r\n# EasyFSM - A Java Library to facilitate Finite State Machine (FSM) creation.\r\n\r\n<A name=\"toc2-3\" title=\"Contents\" />\r\n## Contents\r\n\r\n\r\n**<a href=\"#toc2-8\">Description</a>**\r\n\r\n**<a href=\"#toc2-17\">To build</a>**\r\n\r\n**<a href=\"#toc2-23\">To Use Library</a>**\r\n\r\n**<a href=\"#toc2-30\">Usage</a>**\r\n\r\n<A name=\"toc2-8\" title=\"Description\" />\r\n## Description\r\n\r\nThis library facilitates creation of a Finite State Machine (FSM).\r\nLibrary generates a Finite State Machine (FSM) from a configuration\r\nfile specified while invoking the object for the FSM class.\r\n\r\nCurrent library has been built as Java Library Project in Netbeans 7.0.1\r\n\r\n<A name=\"toc2-17\" title=\"To build\" />\r\n## To build\r\n\r\nSource code (EasyFSM.zip) can be extracted and built in a Netbeans IDE \r\nor can even be ported to an Eclipse environment.\r\n\r\n<A name=\"toc2-23\" title=\"To Use Library\" />\r\n## To Use Library\r\n\r\nAdd EasyFSM.jar to the Java Library folder of your project or Java Installation.\r\nEnsure that the CLASSPATH variable of your build environment has the EasyFSM.jar\r\nin its path.\r\n\r\n<A name=\"toc2-30\" title=\"Usage\" />\r\n## Usage\r\n\r\nJust a test example for usage (Example1.java):\r\n\r\n    /**\r\n     * Example1 Code exemplifies the usage of FSM with a fixed path XML configuration file \r\n     **/\r\n    import Action.FSMAction;\r\n    import FSM.FSM;\r\n    \r\n    public class Example1 {\r\n        public static void testFSM() {\r\n            try {\r\n                FSM f = new FSM(\"C://config.xml\", new FSMAction() {\r\n                    @Override\r\n                    public boolean action(String curState, String message, String nextState, Object args) {\r\n                        javax.swing.JOptionPane.showMessageDialog(null, curState + \":\" + message + \" : \" + nextState);\r\n                        /*\r\n                         * Here we can implement our login of how we wish to handle\r\n                         * an action\r\n                         */\r\n                        return true;\r\n                    }\r\n                });\r\n                System.out.println(f.getCurrentState());\r\n                f.ProcessFSM(\"MOVELEFT\");\r\n                System.out.println(f.getCurrentState());\r\n                f.ProcessFSM(\"MOVE\");\r\n                System.out.println(f.getCurrentState());\r\n                f.ProcessFSM(\"MOVERIGHT\");\r\n                System.out.println(f.getCurrentState());\r\n            } catch (ParserConfigurationException ex) {\r\n                Logger.getLogger(TestOwnCode.class.getName()).log(Level.SEVERE, null, ex);\r\n            } catch (SAXException ex) {\r\n                Logger.getLogger(TestOwnCode.class.getName()).log(Level.SEVERE, null, ex);\r\n            } catch (IOException ex) {\r\n                Logger.getLogger(TestOwnCode.class.getName()).log(Level.SEVERE, null, ex);\r\n            }\r\n        }\r\n    \r\n        public static void main(String[] args) {\r\n            try {\r\n                testFSM();\r\n            } catch (Exception ex) {\r\n                Logger.getLogger(TestOwnCode.class.getName()).log(Level.SEVERE, null, ex);\r\n            }\r\n        }\r\n    } \r\n\r\nAnother example (Example2.java):\r\n\r\n    /**\r\n     * Example2 Code exemplifies the usage of FSM with a XML configuration file specified\r\n     * within the project as resource.\r\n     **/\r\n    import Action.FSMAction;\r\n    import FSM.FSM;\r\n    \r\n    public class Example2 {\r\n    \r\n        private String _configFileName = \"resource/config.xml\";\r\n    \r\n        public static void testFSM() {\r\n            try {\r\n                FSM f = new FSM(this.getClass().getClassLoader().getResourceAsStream(_configFileName), new FSMAction() {\r\n                    @Override\r\n                    public boolean action(String curState, String message, String nextState, Object args) {\r\n                        javax.swing.JOptionPane.showMessageDialog(null, curState + \":\" + message + \" : \" + nextState);\r\n                        /*\r\n                         * Here we can implement our login of how we wish to handle\r\n                         * an action\r\n                         */\r\n                        return true;\r\n                    }\r\n                });\r\n                System.out.println(f.getCurrentState());\r\n                f.ProcessFSM(\"MOVELEFT\");\r\n                System.out.println(f.getCurrentState());\r\n                f.ProcessFSM(\"MOVE\");\r\n                System.out.println(f.getCurrentState());\r\n                f.ProcessFSM(\"MOVERIGHT\");\r\n                System.out.println(f.getCurrentState());\r\n            } catch (ParserConfigurationException ex) {\r\n                Logger.getLogger(TestOwnCode.class.getName()).log(Level.SEVERE, null, ex);\r\n            } catch (SAXException ex) {\r\n                Logger.getLogger(TestOwnCode.class.getName()).log(Level.SEVERE, null, ex);\r\n            } catch (IOException ex) {\r\n                Logger.getLogger(TestOwnCode.class.getName()).log(Level.SEVERE, null, ex);\r\n            }\r\n        }\r\n    \r\n        public static void main(String[] args) {\r\n            try {\r\n                testFSM();\r\n            } catch (Exception ex) {\r\n                Logger.getLogger(TestOwnCode.class.getName()).log(Level.SEVERE, null, ex);\r\n            }\r\n        }\r\n    }\r\n\r\nAnother example (Example3.java):\r\n\r\n    /**\r\n     * Example3 Code exemplifies the usage of FSM with a XML configuration file specified\r\n     * within the project as resource along with specific action function for a specific message\r\n     * under any state\r\n     **/\r\n    import Action.FSMAction;\r\n    import FSM.FSM;\r\n    \r\n    public class Example3 {\r\n    \r\n        private String _configFileName = \"resource/config.xml\";\r\n    \r\n        public static void testFSM() {\r\n            try {\r\n                FSM f = new FSM(this.getClass().getClassLoader().getResourceAsStream(_configFileName), new FSMAction() {\r\n                    @Override\r\n                    public boolean action(String curState, String message, String nextState, Object args) {\r\n                        javax.swing.JOptionPane.showMessageDialog(null, curState + \":\" + message + \" : \" + nextState);\r\n                        /*\r\n                         * Here we can implement our login of how we wish to handle\r\n                         * an action\r\n                         */\r\n                        return true;\r\n                    }\r\n                });\r\n                f.setAction(\"MOVELEFT\", new FSMAction() {\r\n                    @Override\r\n                    public boolean action(String curState, String message, String nextState, Object args) {\r\n                        System.out.println(\"Customized moveLeft!\");\r\n                        return true;\r\n                    }\r\n                });\r\n                System.out.println(f.getCurrentState());\r\n                f.ProcessFSM(\"MOVELEFT\");\r\n                System.out.println(f.getCurrentState());\r\n                f.ProcessFSM(\"MOVE\");\r\n                System.out.println(f.getCurrentState());\r\n                f.ProcessFSM(\"MOVERIGHT\");\r\n                System.out.println(f.getCurrentState());\r\n            } catch (ParserConfigurationException ex) {\r\n                Logger.getLogger(TestOwnCode.class.getName()).log(Level.SEVERE, null, ex);\r\n            } catch (SAXException ex) {\r\n                Logger.getLogger(TestOwnCode.class.getName()).log(Level.SEVERE, null, ex);\r\n            } catch (IOException ex) {\r\n                Logger.getLogger(TestOwnCode.class.getName()).log(Level.SEVERE, null, ex);\r\n            }\r\n        }\r\n    \r\n        public static void main(String[] args) {\r\n            try {\r\n                testFSM();\r\n            } catch (Exception ex) {\r\n                Logger.getLogger(TestOwnCode.class.getName()).log(Level.SEVERE, null, ex);\r\n            }\r\n        }\r\n    }\r\n\r\nAnother example (Example4.java):\r\n\r\n    /**\r\n     * Example4 Code exemplifies the usage of FSM with a XML configuration file specified\r\n     * within the project as resource along with specific action function for a specific message\r\n     * under specific state\r\n     **/\r\n    import Action.FSMAction;\r\n    import FSM.FSM;\r\n    \r\n    public class Example4 {\r\n    \r\n        private String _configFileName = \"resource/config.xml\";\r\n    \r\n        public static void testFSM() {\r\n            try {\r\n                FSM f = new FSM(this.getClass().getClassLoader().getResourceAsStream(_configFileName), new FSMAction() {\r\n                    @Override\r\n                    public boolean action(String curState, String message, String nextState, Object args) {\r\n                        javax.swing.JOptionPane.showMessageDialog(null, curState + \":\" + message + \" : \" + nextState);\r\n                        /*\r\n                         * Here we can implement our login of how we wish to handle\r\n                         * an action\r\n                         */\r\n                        return true;\r\n                    }\r\n                });\r\n                f.setAction(\"START\", \"MOVELEFT\", new FSMAction() {\r\n                    @Override\r\n                    public boolean action(String curState, String message, String nextState, Object args) {\r\n                        System.out.println(\"Customized moveLeft!\");\r\n                        return true;\r\n                    }\r\n                });\r\n                System.out.println(f.getCurrentState());\r\n                f.ProcessFSM(\"MOVELEFT\");\r\n                System.out.println(f.getCurrentState());\r\n                f.ProcessFSM(\"MOVE\");\r\n                System.out.println(f.getCurrentState());\r\n                f.ProcessFSM(\"MOVERIGHT\");\r\n                System.out.println(f.getCurrentState());\r\n            } catch (ParserConfigurationException ex) {\r\n                Logger.getLogger(TestOwnCode.class.getName()).log(Level.SEVERE, null, ex);\r\n            } catch (SAXException ex) {\r\n                Logger.getLogger(TestOwnCode.class.getName()).log(Level.SEVERE, null, ex);\r\n            } catch (IOException ex) {\r\n                Logger.getLogger(TestOwnCode.class.getName()).log(Level.SEVERE, null, ex);\r\n            }\r\n        }\r\n    \r\n        public static void main(String[] args) {\r\n            try {\r\n                testFSM();\r\n            } catch (Exception ex) {\r\n                Logger.getLogger(TestOwnCode.class.getName()).log(Level.SEVERE, null, ex);\r\n            }\r\n        }\r\n    }\r\n\r\nAnother example (Example5.java):\r\n\r\n    /**\r\n     * Example5 Code exemplifies the usage of FSM with a XML configuration file specified\r\n     * within the project as resource along with specific action function for a specific message\r\n     * under specific state with each action interface even specifying their own entry and exit\r\n     * methods customized\r\n     **/\r\n    import Action.FSMAction;\r\n    import FSM.FSM;\r\n    \r\n    public class Example5 {\r\n    \r\n        private String _configFileName = \"resource/config.xml\";\r\n    \r\n        public static void testFSM() {\r\n            try {\r\n                FSM f = new FSM(this.getClass().getClassLoader().getResourceAsStream(_configFileName), new FSMAction() {\r\n                    @Override\r\n                    public boolean action(String curState, String message, String nextState, Object args) {\r\n                        javax.swing.JOptionPane.showMessageDialog(null, curState + \":\" + message + \" : \" + nextState);\r\n                        /*\r\n                         * Here we can implement our login of how we wish to handle\r\n                         * an action\r\n                         */\r\n                        return true;\r\n                    }\r\n                });\r\n                f.setAction(\"START\", \"MOVELEFT\", new FSMAction() {\r\n                @Override\r\n                public boolean action(String curState, String message, String nextState, Object args) {\r\n                    System.out.println(\"Customized moveLeft!\");\r\n                    return false;\r\n                }\r\n\r\n                @Override\r\n                public void afterTransition(String curState, String message, String nextState, Object args) {\r\n                    System.out.println(\"Customized After-Transition!!\");\r\n                }\r\n                \r\n                @Override\r\n                public void entry(String curState, String message, String nextState, Object args) {\r\n                    System.out.println(\"Customized Entry!!\");\r\n                }\r\n\r\n                @Override\r\n                public void exit(String curState, String message, String nextState, Object args) {\r\n                    System.out.println(\"Customized Exit!!\");\r\n                }\r\n                });\r\n                System.out.println(f.getCurrentState());\r\n                f.ProcessFSM(\"MOVELEFT\");\r\n                System.out.println(f.getCurrentState());\r\n                f.ProcessFSM(\"MOVE\");\r\n                System.out.println(f.getCurrentState());\r\n                f.ProcessFSM(\"MOVERIGHT\");\r\n                System.out.println(f.getCurrentState());\r\n            } catch (ParserConfigurationException ex) {\r\n                Logger.getLogger(TestOwnCode.class.getName()).log(Level.SEVERE, null, ex);\r\n            } catch (SAXException ex) {\r\n                Logger.getLogger(TestOwnCode.class.getName()).log(Level.SEVERE, null, ex);\r\n            } catch (IOException ex) {\r\n                Logger.getLogger(TestOwnCode.class.getName()).log(Level.SEVERE, null, ex);\r\n            }\r\n        }\r\n    \r\n        public static void main(String[] args) {\r\n            try {\r\n                testFSM();\r\n            } catch (Exception ex) {\r\n                Logger.getLogger(TestOwnCode.class.getName()).log(Level.SEVERE, null, ex);\r\n            }\r\n        }\r\n    }\r\n\r\nXML Configuration file should be of the following format:\r\n\r\n    <?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n    \r\n    <!--\r\n        Document   : config.xml\r\n        Created on : 22 March, 2013, 9:05 AM\r\n        Author     : ANKIT\r\n        Description:\r\n            File specifies states and transition of an FSM.\r\n            This is an example file.\r\n    -->\r\n    \r\n    <FSM>\r\n            <STATE id=\"START\" type=\"ID\">\r\n                    <MESSAGE id=\"MOVE\" action=\"move\" nextState=\"START\" />\r\n                    <MESSAGE id=\"MOVELEFT\" action=\"moveLeft\" nextState=\"INTERMEDIATE\" />\r\n                    <MESSAGE id=\"MOVERIGHT\" action=\"moveRight\" nextState=\"STOP\" />\r\n            </STATE>\r\n            <STATE id=\"INTERMEDIATE\">\r\n                    <MESSAGE id=\"MOVELEFT\" action=\"moveLeft\" nextState=\"STOP\" />\r\n                    <MESSAGE id=\"MOVERIGHT\" action=\"moveRight\" nextState=\"ANKIT\" />\r\n            </STATE>\r\n            <STATE id=\"STOP\" />\r\n            <STATE id=\"ANKIT\" />\r\n    </FSM>\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}